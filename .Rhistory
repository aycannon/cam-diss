width = 0.02) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +
labs(title = "Quantile Regression Estimates of Forward Premium Coefficient",
x = "Quantile (τ)", y = "Estimate of β (prem)") +
theme_minimal()
ggplot(simple %>% filter(grepl("_prem$", term)), aes(x = Currency, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = estimate - 1.96 * std.error,
ymax = estimate + 1.96 * std.error),
width = 0.02) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +
labs(title = "Quantile Regression Estimates of Forward Premium Coefficient",
x = "Quantile (τ)", y = "Estimate of β (prem)") +
theme_minimal()
ggplot(simple %>% filter(grepl("_prem$", term)), aes(x = Currency, y = estimate, color = Currency)) +
geom_point() +
geom_errorbar(aes(ymin = estimate - 1.96 * std.error,
ymax = estimate + 1.96 * std.error),
width = 0.02) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +
labs(title = "Quantile Regression Estimates of Forward Premium Coefficient",
x = "Quantile (τ)", y = "Estimate of β (prem)") +
theme_minimal()
ggplot(simple %>% filter(grepl("_prem$", term)), aes(x = Currency, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = estimate - 1.96 * std.error,
ymax = estimate + 1.96 * std.error),
width = 0.02) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +
labs(title = "Quantile Regression Estimates of Forward Premium Coefficient",
x = "Quantile (τ)", y = "Estimate of β (prem)") +
theme_minimal()
ggplot(simple %>% filter(grepl("_prem$", term)), aes(x = Currency, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = estimate - 1.96 * std.error,
ymax = estimate + 1.96 * std.error),
width = 0.02) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +
labs(title = "Simple Regression Estimates",
x = "Currency", y = "Estimate of β (prem)") +
theme_minimal()
# Extract alpha estimates
alphas2 <- sapply(currency_results, function(x) if (!is.null(x)) x$alpha else NA)
print(alphas2)
# Extract p-values for H0: alpha = 0.5
p_vals2 <- sapply(currency_results, function(x) if (!is.null(x)) x$p_val else NA)
print(p_vals2)
estimate_a <- function(currencies, wide_data, p = 2) {
# Define moment function inside for clarity/scope
gmm_moments <- function(theta, data) {
alpha <- theta[1]
e <- data$forecast_error
z <- as.matrix(data[, c("const", "lag_error")])
lambda <- alpha + (1 - 2 * alpha) * (e < 0)
g <- lambda * e^(p - 1) * z
return(g)
}
currency_results <- list()
for (cur in currencies) {
message("Running GMM for ", cur)
e_col <- cur
f_col <- paste0(cur, "_FWD")
data_cur <- wide_data %>%
transmute(
forecast_error = .data[[e_col]] - .data[[f_col]],
lag_error = lag(.data[[e_col]] - .data[[f_col]]),
const = 1
) %>%
na.omit()
if (nrow(data_cur) > 10) {
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
type = "cue",
method = "Brent",
lower = 0.01,
upper = 0.99)
}, error = function(e) NULL)
if (!is.null(res)) {
alpha_hat <- coef(res)
vcv_hat <- vcov(res)
se_alpha <- sqrt(vcv_hat[1, 1])
t_stat <- (alpha_hat - 0.5) / se_alpha
p_val <- 2 * pt(-abs(t_stat), df = nrow(data_cur) - 1)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = alpha_hat,
vcov = vcv_hat,
t_stat = t_stat,
p_val = p_val
)
}
} else {
message("Not enough data for ", cur)
}
}
return(currency_results)
}
estimate_a <- function(currencies, wide_data, p) {
# Define moment function inside for clarity/scope
gmm_moments <- function(theta, data) {
alpha <- theta[1]
e <- data$forecast_error
z <- as.matrix(data[, c("const", "lag_error")])
lambda <- alpha + (1 - 2 * alpha) * (e < 0)
g <- lambda * e^(p - 1) * z
return(g)
}
currency_results <- list()
for (cur in currencies) {
message("Running GMM for ", cur)
e_col <- cur
f_col <- paste0(cur, "_FWD")
data_cur <- wide_data %>%
transmute(
forecast_error = .data[[e_col]] - .data[[f_col]],
lag_error = lag(.data[[e_col]] - .data[[f_col]]),
const = 1
) %>%
na.omit()
if (nrow(data_cur) > 10) {
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
type = "cue",
method = "Brent",
lower = 0.01,
upper = 0.99)
}, error = function(e) NULL)
if (!is.null(res)) {
alpha_hat <- coef(res)
vcv_hat <- vcov(res)
se_alpha <- sqrt(vcv_hat[1, 1])
t_stat <- (alpha_hat - 0.5) / se_alpha
p_val <- 2 * pt(-abs(t_stat), df = nrow(data_cur) - 1)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = alpha_hat,
vcov = vcv_hat,
t_stat = t_stat,
p_val = p_val
)
}
} else {
message("Not enough data for ", cur)
}
}
return(currency_results)
}
results1 <- estimate_a(currencies = c("GBP", "EUR", "CAD", "JPY"), wide_data = wide_data, p = 1)
results1
results2 <- estimate_a(currencies = c("GBP", "EUR", "CAD", "JPY"), wide_data = wide_data, p = 2)
results2
# View results for one example currency (e.g., EUR)
results2$EUR
alphas2
results2$GBP
results2$CAD
results2$JPY
# Extract alpha estimates
alphas2 <- sapply(results2, function(x) if (!is.null(x)) x$alpha else NA)
print(alphas2)
alphas2
# Extract p-values for H0: alpha = 0.5
p_vals2 <- sapply(results2, function(x) if (!is.null(x)) x$p_val else NA)
print(p_vals2)
# Step 1: Clean alpha names
alphas_clean <- setNames(as.numeric(alphas2), gsub("\\.Theta\\[1\\]", "", names(alphas2)))
# Step 2: Transform excess returns using loss function
wide_transformed <- wide_data
for (cur in currencies) {
excess_var <- paste0(cur, "_excess")
trans_var  <- paste0(cur, "_excess_trans")
if (cur %in% names(alphas_clean)) {
alpha <- alphas_clean[[cur]]
e <- wide_transformed[[excess_var]]
wide_transformed[[trans_var]] <- (alpha + (1 - 2 * alpha) * (e < 0)) * abs(e)^2
} else {
wide_transformed[[trans_var]] <- NA_real_
}
}
simple2 <- purrr::map_dfr(currencies, function(cur) {
trans_var <- paste0(cur, "_excess_trans")
prem_var  <- paste0(cur, "_prem")
df <- wide_transformed %>%
dplyr::select(all_of(c(trans_var, prem_var))) %>%
filter(!is.na(.data[[trans_var]]), !is.na(.data[[prem_var]]))
model <- lm(as.formula(paste0(trans_var, " ~ ", prem_var)), data = df)
tidy(model) %>% mutate(Currency = cur)
})
# Step 4: Print results with hypothesis tests
for (cur in currencies) {
cat("--------------", cur , "--------------\n")
trans_var <- paste0(cur, "_excess_trans")
prem_var  <- paste0(cur, "_prem")
df <- wide_transformed %>%
dplyr::select(all_of(c(trans_var, prem_var))) %>%
filter(!is.na(.data[[trans_var]]), !is.na(.data[[prem_var]]))
m <- lm(as.formula(paste0(trans_var, " ~ ", prem_var)), data = df)
cat("  alpha:", round(coef(m)[1], 4),
" | beta:", round(coef(m)[2], 4), "\n")
print(summary(m))
}
resid_data <- list()
for (cur in currencies) {
excess_var <- paste0(cur, "_excess")
prem_var   <- paste0(cur, "_prem")
df <- wide_data %>%
dplyr::select(all_of(c(excess_var, prem_var))) %>%
filter(!is.na(.data[[excess_var]]), !is.na(.data[[prem_var]]))
# Fit linear model and extract residuals
model <- lm(as.formula(paste0(excess_var, " ~ ", prem_var)), data = df)
residuals_df <- tibble(
Currency = cur,
Residual = residuals(model),
Mean = mean(residuals(model)),
SD = sd(residuals(model))
)
resid_data[[cur]] <- residuals_df
}
# Combine all residuals
resid_plot_df <- bind_rows(resid_data)
means_sds <- resid_plot_df %>%
group_by(Currency) %>%
summarise(Mean = unique(Mean), SD = unique(SD), .groups = "drop")
normal_curves <- means_sds %>%
mutate(x = map2(Mean, SD, ~ seq(.x - 4*.y, .x + 4*.y, length.out = 200))) %>%
unnest(cols = c(x)) %>%
mutate(y = dnorm(x, mean = Mean, sd = SD))
# Now plot
ggplot(resid_plot_df, aes(x = Residual)) +
geom_density(color = "darkred", linewidth = 1, fill = "darkred", alpha = 0.5) +
geom_line(data = normal_curves, aes(x = x, y = y), color = "blue", linetype = "dashed", linewidth = 0.5, alpha = 0.9) +
facet_wrap(~ Currency, scales = "free") +
theme_minimal() +
labs(title = "Prediction Error Densities vs Fitted Normal Distribution",
x = "Residual",
y = "Density")
fixed_quantiles <- c(0.1, 0.25, 0.5, 0.75, 0.9)
quantiles_by_currency <- setNames(as.numeric(alphas2), gsub("\\.Theta\\[1\\]", "", names(alphas2)))
currencies <- names(quantiles_by_currency)
# Store results
qr_results <- list()
# Loop over currencies
for (cur in currencies) {
tau_vec <- sort(unique(c(quantiles_by_currency[[cur]], fixed_quantiles)))
excess_var <- paste0(cur, "_excess")
prem_var   <- paste0(cur, "_prem")
df <- wide_data %>%
dplyr::select(all_of(c(excess_var, prem_var))) %>%
filter(!is.na(.data[[excess_var]]), !is.na(.data[[prem_var]])) %>%
rename(excess = all_of(excess_var), prem = all_of(prem_var))
for (tau in tau_vec) {
fit <- rq(excess ~ prem, tau = tau, data = df)
preds <- predict(fit, newdata = df)
err <- df$excess - preds
qr_results[[length(qr_results) + 1]] <- tibble(
Currency = cur,
Tau = tau,
MAE = mean(abs(err)),
RMSE = sqrt(mean(err^2))
)
}
}
# Combine and inspect
qr_df <- bind_rows(qr_results)
qr_df <- qr_df %>% arrange(Currency, Tau)
print(qr_df)
ggplot(qr_df, aes(x = Tau, y = MAE, color = Currency)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
labs(title = "Quantile Regression Forecast Error by τ",
x = "Quantile (τ)",
y = "Mean Absolute Error (MAE)") +
theme_minimal() +
theme(legend.position = "bottom")
highlight_df <- qr_df %>%
group_by(Currency) %>%
filter(abs(Tau - quantiles_by_currency[Currency]) < 1e-6) %>%
ungroup()
ggplot(qr_df, aes(x = Tau, y = MAE, color = Currency)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_point(data = highlight_df,
aes(x = Tau, y = MAE),
shape = 21, size = 4, fill = "black", color = "white", stroke = 1.5) +
labs(title = "Quantile Regression Forecast Error by τ",
x = "Quantile (τ)",
y = "Mean Absolute Error (MAE)") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(qr_df, aes(x = Tau, y = MAE, color = Currency)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_point(data = highlight_df,
aes(x = Tau, y = MAE, color = Currency),
shape = 21, size = 4, stroke = 1.5) +
labs(title = "Quantile Regression Forecast Error by τ",
x = "Quantile (τ)",
y = "Mean Absolute Error (MAE)") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(qr_df, aes(x = Tau, y = MAE, color = Currency)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_point(data = highlight_df,
aes(x = Tau, y = MAE, color = Currency),
shape = 21, size = 4, stroke = 1.5, fill = NA) +
labs(title = "Quantile Regression Forecast Error by τ",
x = "Quantile (τ)",
y = "Mean Absolute Error (MAE)") +
theme_minimal() +
theme(legend.position = "bottom")
fit
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[2][1]
fit$coefficients[2][2]
fit$coefficients[2]
# Loop over currencies
for (cur in currencies) {
tau_vec <- sort(unique(c(quantiles_by_currency[[cur]], fixed_quantiles)))
excess_var <- paste0(cur, "_excess")
prem_var   <- paste0(cur, "_prem")
df <- wide_data %>%
dplyr::select(all_of(c(excess_var, prem_var))) %>%
filter(!is.na(.data[[excess_var]]), !is.na(.data[[prem_var]])) %>%
rename(excess = all_of(excess_var), prem = all_of(prem_var))
for (tau in tau_vec) {
fit <- rq(excess ~ prem, tau = tau, data = df)
preds <- predict(fit, newdata = df)
err <- df$excess - preds
qr_results[[length(qr_results) + 1]] <- tibble(
Currency = cur,
Tau = tau,
Estimate = coef(fit)["prem"],
MAE = mean(abs(err)),
RMSE = sqrt(mean(err^2))
)
}
}
# Combine and inspect
qr_df <- bind_rows(qr_results)
qr_df <- qr_df %>% arrange(Currency, Tau)
print(qr_df)
highlight_df <- qr_df %>%
group_by(Currency) %>%
filter(abs(Tau - quantiles_by_currency[Currency]) < 1e-6) %>%
ungroup()
ggplot(qr_df, aes(x = Tau, y = MAE, color = Currency)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_point(data = highlight_df,
aes(x = Tau, y = MAE, color = Currency),
shape = 21, size = 4, stroke = 1.5, fill = NA) +
labs(title = "Quantile Regression Forecast Error by τ",
x = "Quantile (τ)",
y = "Mean Absolute Error (MAE)") +
theme_minimal() +
theme(legend.position = "bottom")
RMSE = sqrt(mean(err^2))
ggplot(qr_df, aes(x = Tau, y = Estimate, color = Currency)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Quantile Regression Coefficients by τ",
x = "Quantile (τ)",
y = expression(beta~"Estimate")) +
theme_minimal() +
theme(legend.position = "bottom")
fit
sd(fit$residuals)
summary(fit)
summary(fit)$coefficients["prem", "Std. Error"]
# Loop over currencies
for (cur in currencies) {
tau_vec <- sort(unique(c(quantiles_by_currency[[cur]], fixed_quantiles)))
excess_var <- paste0(cur, "_excess")
prem_var   <- paste0(cur, "_prem")
df <- wide_data %>%
dplyr::select(all_of(c(excess_var, prem_var))) %>%
filter(!is.na(.data[[excess_var]]), !is.na(.data[[prem_var]])) %>%
rename(excess = all_of(excess_var), prem = all_of(prem_var))
for (tau in tau_vec) {
fit <- rq(excess ~ prem, tau = tau, data = df)
preds <- predict(fit, newdata = df)
err <- df$excess - preds
qr_results[[length(qr_results) + 1]] <- tibble(
Currency = cur,
Tau = tau,
Estimate = coef(fit)["prem"],
SD = summary(fit)$coefficients["prem", "Std. Error"],
MAE = mean(abs(err)),
RMSE = sqrt(mean(err^2))
)
}
}
# Loop over currencies
for (cur in currencies) {
tau_vec <- sort(unique(c(quantiles_by_currency[[cur]], fixed_quantiles)))
excess_var <- paste0(cur, "_excess")
prem_var   <- paste0(cur, "_prem")
df <- wide_data %>%
dplyr::select(all_of(c(excess_var, prem_var))) %>%
filter(!is.na(.data[[excess_var]]), !is.na(.data[[prem_var]])) %>%
rename(excess = all_of(excess_var), prem = all_of(prem_var))
for (tau in tau_vec) {
fit <- rq(excess ~ prem, tau = tau, data = df)
preds <- predict(fit, newdata = df)
err <- df$excess - preds
qr_results[[length(qr_results) + 1]] <- tibble(
Currency = cur,
Tau = tau,
Estimate = coef(fit)["prem"],
SD = summary(fit)$coefficients["prem", "Std. Error"],
MAE = mean(abs(err)),
RMSE = sqrt(mean(err^2))
)
}
}
# Combine and inspect
qr_df <- bind_rows(qr_results)
qr_df <- qr_df %>% arrange(Currency, Tau)
print(qr_df)
qr_df <- qr_df %>% arrange(Currency, Tau) %>% drop_na()
qr_df
qr_df <- qr_df %>% arrange(Currency, Tau) %>% drop_na() %>% distinct()
print(qr_df)
ggplot(qr_df, aes(x = Tau, y = Estimate)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_point(size = 2, color = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
facet_wrap(~ Currency, scales = "free_y") +
labs(title = "Quantile Regression Coefficients by τ",
x = "Quantile (τ)",
y = expression(beta~"Estimate")) +
theme_minimal() +
theme(strip.text = element_text(size = 12),
legend.position = "none")
ggplot(qr_df, aes(x = Tau, y = Estimate)) +
geom_point(color = "steelblue", size = 2) +
geom_errorbar(aes(ymin = Estimate - StdError, ymax = Estimate + StdError),
width = 0.02, color = "steelblue", linewidth = 0.6) +
geom_line(color = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
facet_wrap(~ Currency, scales = "free_y") +
labs(title = "Quantile Regression Coefficients by τ",
x = "Quantile (τ)",
y = expression(beta~"Estimate")) +
theme_minimal() +
theme(strip.text = element_text(size = 12),
legend.position = "none")
ggplot(qr_df, aes(x = Tau, y = Estimate)) +
geom_point(color = "steelblue", size = 2) +
geom_errorbar(aes(ymin = Estimate - SD, ymax = Estimate + SD),
width = 0.02, color = "steelblue", linewidth = 0.6) +
geom_line(color = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
facet_wrap(~ Currency, scales = "free_y") +
labs(title = "Quantile Regression Coefficients by τ",
x = "Quantile (τ)",
y = expression(beta~"Estimate")) +
theme_minimal() +
theme(strip.text = element_text(size = 12),
legend.position = "none")
ggplot(qr_df, aes(x = Tau, y = Estimate, color = Currency)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Quantile Regression Coefficients by τ",
x = "Quantile (τ)",
y = expression(beta~"Estimate")) +
theme_minimal() +
theme(legend.position = "bottom")
highlight_df <- qr_df %>%
group_by(Currency) %>%
filter(abs(Tau - quantiles_by_currency[Currency]) < 1e-6) %>%
ungroup()
ggplot(qr_df, aes(x = Tau, y = Estimate)) +
geom_point(color = "steelblue", size = 2) +
geom_errorbar(aes(ymin = Estimate - SD, ymax = Estimate + SD),
width = 0.02, color = "steelblue", linewidth = 0.6) +
geom_line(color = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
geom_point(data = highlight_df,
aes(x = Tau, y = Estimate),
shape = 21, size = 4, stroke = 1.5, fill = NA) +
facet_wrap(~ Currency, scales = "free_y") +
labs(title = "Quantile Regression Coefficients by τ",
x = "Quantile (τ)",
y = expression(beta~"Estimate")) +
theme_minimal() +
theme(strip.text = element_text(size = 12),
legend.position = "none")
ggplot(qr_df, aes(x = Tau, y = Estimate)) +
geom_point(color = "steelblue", size = 2) +
geom_errorbar(aes(ymin = Estimate - SD, ymax = Estimate + SD),
width = 0.02, color = "steelblue", linewidth = 0.6) +
geom_line(color = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
geom_point(data = highlight_df,
aes(x = Tau, y = Estimate),
shape = 21, size = 4, stroke = 1, fill = NA) +
facet_wrap(~ Currency, scales = "free_y") +
labs(title = "Quantile Regression Coefficients by τ",
x = "Quantile (τ)",
y = expression(beta~"Estimate")) +
theme_minimal() +
theme(strip.text = element_text(size = 12),
legend.position = "none")
