" | beta:", round(coef(m)[2], 4), "\n")
print(coef(m))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
cat("\n alpha:", round(coef(m)[1], 4),
" | beta:", round(coef(m)[2], 4), "\n")
#print(coef(m))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
#cat("\n alpha:", round(coef(m)[1], 4),
" | beta:", round(coef(m)[2], 4), "\n")
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
#cat("\n alpha:", round(coef(m)[1], 4),
#    " | beta:", round(coef(m)[2], 4), "\n")
print(coef(m))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
cat("\n alpha:", round(coef(m)[1], 4),
" | beta:", round(coef(m)[2], 4), "\n")
print(coef(m))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
cat("\n alpha:", round(coef(m)[1], 4),
" | beta:", round(coef(m)[2], 4), "\n")
#print(coef(m))
print(linearHypothesis(m, "prem = 1"))
}
ggplot(simple, aes(x = Base, y = estimate)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Forward Premium Coefficients",
x = "Currency",
y = "Coefficient (β)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
simple <- df1 %>%
group_by(Base) %>%
do(tidy(lm(excess ~ prem, data = .))) %>%
ungroup()
ggplot(simple, aes(x = Base, y = estimate)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Forward Premium Coefficients",
x = "Currency",
y = "Coefficient (β)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(simple, aes(x = Base, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error),
position = position_dodge(width = 0.5),
color = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Forward Premium Coefficients",
x = "Currency",
y = "Coefficient (β)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
simple
ggplot(simple %>% filter(term == "prem"), aes(x = Base, y = estimate)) +
geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error),
position = position_dodge(width = 0.5),
color = "steelblue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Forward Premium Coefficients",
x = "Currency",
y = "Coefficient (β)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("lmtest")
install.packages("lmtest")
library(lmtest)
install.packages("AER")
library(AER)
install.packages("gmm")
library(gmm)
df1 <- df1 %>%
mutate(
forecast_error = spot1 - fwd  # s_{t+1} - f_t
) %>%
arrange(Base, Date) %>%
group_by(Base) %>%
mutate(
lag_error = lag(forecast_error)
) %>%
ungroup() %>%
na.omit()
# defining moment conditions
gmm_moments <- function(alpha, data) {
e <- data$forecast_error
z1 <- rep(1, length(e))             # constant instrument
z2 <- data$lag_error                # lagged error
z <- cbind(z1, z2)                  # instrument matrix
loss_weight <- alpha + (1 - 2 * alpha) * (e < 0)
g <- loss_weight * e^(p - 1) * z    # moment conditions
return(g)
}
gmm_fn <- function(theta, x) {
alpha <- theta[1]
return(gmm_moments(alpha, x))
}
# estimate alpha
start_alpha <- 0.5
res <- gmm(gmm_fn, x = df1, t0 = start_alpha, type = "iterative")
res
# -----------------------------
# Step 4: Output results
# -----------------------------
summary(res)
currency_results <- list()
currency_list <- unique(df1$Base)
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error)
) %>%
na.omit()
if (nrow(data_cur) > 10) {
try({
res <- gmm(gmm_fn, x = data_cur, t0 = 0.5, type = "iterative")
currency_results[[cur]] <- list(
summary = summary(res),
alpha = coef(res),
wald = wald.test(b = coef(res), Sigma = vcov(res), Terms = 1, H = matrix(0.5), L = matrix(1))
)
}, silent = TRUE)
} else {
message("Not enough data for ", cur)
}
}
print(currency_results[["EUR"]]$summary)
currency_results
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error)
) %>%
na.omit()
if (nrow(data_cur) > 10) {
try({
res <- gmm(gmm_fn, x = data_cur, t0 = 0.5, type = "Brent", lower = 0.01, upper = 0.99)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = coef(res),
wald = wald.test(b = coef(res), Sigma = vcov(res), Terms = 1, H = matrix(0.5), L = matrix(1))
)
}, silent = TRUE)
} else {
message("Not enough data for ", cur)
}
}
print(currency_results[["EUR"]]$summary)
print(currency_results[["CAD"]]$summary)
# defining moment conditions
gmm_moments <- function(theta, data) {
alpha <- theta[1]
e <- data$forecast_error
z <- as.matrix(data[, c("const", "lag_error")])
lambda <- alpha + (1 - 2 * alpha) * (e < 0)
g <- lambda * e^(p - 1) * z
return(g)
}
# Prepare results list
currency_results <- list()
# Loop over currencies
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error),
const = 1
) %>%
select(forecast_error, lag_error, const) %>%
na.omit()
if (nrow(data_cur) > 10) {
# Use GMM base function with user-defined moment conditions
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
method = "BFGS",
control = list(abstol = 1e-8, reltol = 1e-8))
}, error = function(e) NULL)
if (!is.null(res)) {
currency_results[[cur]] <- list(
summary = summary(res),
alpha = coef(res),
vcov = vcov(res),
wald = tryCatch(wald.test(b = coef(res), Sigma = vcov(res), Terms = 1,
H = matrix(0.5), L = matrix(1)), error = function(e) NA)
)
}
} else {
message("Not enough data for ", cur)
}
}
# Loop over currencies
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error),
const = 1
) %>%
dplyr::select(forecast_error, lag_error, const) %>%
na.omit()
if (nrow(data_cur) > 10) {
# Use GMM base function with user-defined moment conditions
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
method = "BFGS",
control = list(abstol = 1e-8, reltol = 1e-8))
}, error = function(e) NULL)
if (!is.null(res)) {
currency_results[[cur]] <- list(
summary = summary(res),
alpha = coef(res),
vcov = vcov(res),
wald = tryCatch(wald.test(b = coef(res), Sigma = vcov(res), Terms = 1,
H = matrix(0.5), L = matrix(1)), error = function(e) NA)
)
}
} else {
message("Not enough data for ", cur)
}
}
# estimate alpha
start_alpha <- 0.5
res <- gmm(gmm_fn, x = df1, t0 = start_alpha, type = "iterative")
currency_results
# View results
print(currency_results[["EUR"]]$summary)
# Extract alphas
alphas <- sapply(currency_results, function(x) if (!is.null(x)) x$alpha else NA)
print(alphas)
# Hypothesis test: Is alpha = 0.5? (symmetric loss)
wald.test(b = coef(res), Sigma = vcov(res), Terms = 1, H = matrix(0.5), L = matrix(1))
install.packages("aod")
library(aod)
# Prepare results list
currency_results <- list()
# Loop over currencies
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error),
const = 1
) %>%
select(forecast_error, lag_error, const) %>%
na.omit()
if (nrow(data_cur) > 10) {
# Perform two-step GMM estimation as in Elliott et al. (2005)
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
type = "twoStep")
}, error = function(e) NULL)
if (!is.null(res)) {
alpha_hat <- coef(res)
vcv_hat <- vcov(res)
# Wald test to determine if alpha is significantly different from 0.5
wald_result <- tryCatch(
wald.test(b = alpha_hat, Sigma = vcv_hat, Terms = 1, H = matrix(0.5), L = matrix(1)),
error = function(e) NA
)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = alpha_hat,
vcov = vcv_hat,
wald = wald_result
)
}
} else {
message("Not enough data for ", cur)
}
}
# Loop over currencies
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error),
const = 1
) %>%
dplyr::select(forecast_error, lag_error, const) %>%
na.omit()
if (nrow(data_cur) > 10) {
# Perform two-step GMM estimation as in Elliott et al. (2005)
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
type = "twoStep")
}, error = function(e) NULL)
if (!is.null(res)) {
alpha_hat <- coef(res)
vcv_hat <- vcov(res)
# Wald test to determine if alpha is significantly different from 0.5
wald_result <- tryCatch(
wald.test(b = alpha_hat, Sigma = vcv_hat, Terms = 1, H = matrix(0.5), L = matrix(1)),
error = function(e) NA
)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = alpha_hat,
vcov = vcv_hat,
wald = wald_result
)
}
} else {
message("Not enough data for ", cur)
}
}
# View results for one example currency (e.g., EUR)
print(currency_results[["EUR"]]$summary)
print(currency_results[["EUR"]]$wald)
# Extract p-values for Wald tests (null: alpha = 0.5)
wald_pvals <- sapply(currency_results, function(x) {
if (!is.null(x$wald) && !is.na(x$wald)) {
return(x$wald$result$chi2[3])
} else {
return(NA)
}
})
print(wald_pvals)
# Prepare results list
currency_results <- list()
currency_list <- unique(df1$Base)
# Loop over currencies
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error),
const = 1
) %>%
dplyr::select(forecast_error, lag_error, const) %>%
na.omit()
if (nrow(data_cur) > 10) {
# Perform two-step GMM estimation as in Elliott et al. (2005)
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
type = "twoStep")
}, error = function(e) NULL)
if (!is.null(res)) {
alpha_hat <- coef(res)
vcv_hat <- vcov(res)
# Ensure dimensions match for Wald test
valid <- !any(is.na(vcv_hat)) && length(alpha_hat) == nrow(vcv_hat)
wald_result <- tryCatch(
if (valid) {
wald.test(b = alpha_hat, Sigma = vcv_hat, Terms = 1,
H = matrix(0.5), L = matrix(1))
} else {
NA
},
error = function(e) NA
)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = alpha_hat,
vcov = vcv_hat,
wald = wald_result
)
}
} else {
message("Not enough data for ", cur)
}
}
# Loop over currencies
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error),
const = 1
) %>%
dplyr::select(forecast_error, lag_error, const) %>%
na.omit()
if (nrow(data_cur) > 10) {
# Perform two-step GMM estimation as in Elliott et al. (2005)
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
type = "cue",
method = "Brent",
lower = 0.01,
upper = 0.99)
}, error = function(e) NULL)
if (!is.null(res)) {
alpha_hat <- coef(res)
vcv_hat <- vcov(res)
# Ensure dimensions match for Wald test
valid <- !any(is.na(vcv_hat)) && length(alpha_hat) == nrow(vcv_hat)
wald_result <- tryCatch(
if (valid) {
wald.test(b = alpha_hat, Sigma = vcv_hat, Terms = 1,
H = matrix(0.5), L = matrix(1))
} else {
NA
},
error = function(e) NA
)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = alpha_hat,
vcov = vcv_hat,
wald = wald_result
)
}
} else {
message("Not enough data for ", cur)
}
}
# View results for one example currency (e.g., EUR)
print(currency_results[["EUR"]]$summary)
print(currency_results[["EUR"]]$wald)
vcov(res)
# Prepare results list
currency_results <- list()
# Prepare results list
currency_results <- list()
currency_list <- unique(df1$Base)
# Loop over currencies
for (cur in currency_list) {
message("Running GMM for ", cur)
data_cur <- df1 %>%
filter(Base == cur) %>%
mutate(
forecast_error = spot1 - fwd,
lag_error = lag(forecast_error),
const = 1
) %>%
dplyr::select(forecast_error, lag_error, const) %>%
na.omit()
if (nrow(data_cur) > 10) {
# GMM with Brent optimization using CUE
res <- tryCatch({
gmm(g = gmm_moments,
x = data_cur,
t0 = c(0.5),
type = "cue",
method = "Brent",
lower = 0.01,
upper = 0.99)
}, error = function(e) NULL)
if (!is.null(res)) {
alpha_hat <- coef(res)
vcv_hat <- vcov(res)
se_alpha <- sqrt(vcv_hat[1, 1])
t_stat <- (alpha_hat - 0.5) / se_alpha
p_val <- 2 * pt(-abs(t_stat), df = nrow(data_cur) - 1)
currency_results[[cur]] <- list(
summary = summary(res),
alpha = alpha_hat,
vcov = vcv_hat,
t_stat = t_stat,
p_val = p_val
)
}
} else {
message("Not enough data for ", cur)
}
}
# View results for one example currency (e.g., EUR)
print(currency_results[["EUR"]]$summary)
print(currency_results[["EUR"]]$t_stat)
print(currency_results[["EUR"]]$p_val)
# Extract alpha estimates
alphas <- sapply(currency_results, function(x) if (!is.null(x)) x$alpha else NA)
print(alphas)
# Extract p-values for H0: alpha = 0.5
p_vals <- sapply(currency_results, function(x) if (!is.null(x)) x$p_val else NA)
print(p_vals)
