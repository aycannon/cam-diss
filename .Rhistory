do(tidy(lm(excess ~ prem, data = .))) %>%
ungroup()
simple
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == "GBP")), "prem = 1")
?car
??car
install.packages("car")
library(car)
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == "GBP")), "prem = 1")
gbp <- df1 %>%
filter(Base == "GBP")
source("preamble.R")
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == "GBP")), "prem = 1")
simple
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == "EUR")), "prem = 1")
ab <- linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == "GBP")), "prem = 1")
ab
?for\
?for
currencies <- unique(df1$Base)
for (base in currencies){
print("\nCurrency: ", base, "\n")
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == base)), "prem = 1")
}
currencies
base
for (base in currencies){
print("\nCurrency: ", base, "\n")
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == base)), "prem = 1")
}
# print("\nCurrency: ", base, "\n")
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == base)), "prem = 1")
for (base in currencies){
# print("\nCurrency: ", base, "\n")
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == base)), "prem = 1")
}
for (base in currencies){
# print("\nCurrency: ", base, "\n")
linearHypothesis(lm(excess ~ prem, data = df1 %>% filter(Base == base)), "prem = 1")
}
for (base in currencies){
# print("\nCurrency: ", base, "\n")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1")))
for (base in currencies){
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1")))
for (base in currencies){
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
print(base)
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
print("--------------",base,"--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
print("\n--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
install.packages("quantreg")
library(quantreg)
qr <- rq(excess ~ prem, data = df1, tau = c(0.25, 0.5, 0.75))
qr
qr <- rq(excess ~ prem, data = df1%>% filter(Base == "GBP"), tau = c(0.25, 0.5, 0.75))
qr
?rq
linearHypothesis(qr, "prem = 1")
summary(qr)
?summary
install.packages("quantregForest")
library(quantregFroest)
library(quantregForest)
?quantregForest
ggplot(df1, aes(x = Date, y = s_t)) +
geom_line(aes(color = Base)) +
labs(title = "Spot Rates",
x = "Date",
y = "Spot") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple")) +
theme(legend.position = "bottom")
source("preamble.R")
df <- read_xlsx("data/data1.xlsx")
dt <- as.data.table(df)
# list <- split(dt, by = names(dt)[1], keep.by = T)
df <- read_xlsx("data/data1.xlsx") %>%
rename_with(~ c("Inst", "Bid", "Ask", "Mid", "Date")) %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"),
Type = if_else(grepl("1MV|FWD", Inst), "forward", "spot"),
Base = gsub("1MV=|=|FWD.*", "", Inst))
head(df)
tail(df)
spot_t <- df %>%
filter(Type == "spot") %>%
dplyr::select(Base, SpotDate = Date, s_t = Mid)
spot_t1 <- df %>%
filter(Type == "spot") %>%
dplyr::select(Base, Spot1Date = Date, s_t1 = Mid) %>%
mutate(date1 = Spot1Date %m+% months(-1))
spot_df <- spot_t %>%
inner_join(spot_t1, by = c("Base", "SpotDate" = "date1")) %>%
mutate(
spot = as.numeric(log(s_t)),
spot1 = as.numeric(log(s_t1)),
excess = as.numeric(spot1 - spot)
)
fwd_df <- df %>%
filter(Type == "forward") %>%
dplyr::select(Base, Date, FwdMid = Mid)
df1 <- fwd_df %>%
inner_join(spot_df, by = c("Base", "Date" = "SpotDate")) %>%
mutate(
f_t = as.numeric(FwdMid),
fwd = log(f_t),
prem = as.numeric(fwd - spot)
)
currencies <- unique(df1$Base)
ggplot(df1, aes(x = Date, y = s_t)) +
geom_line(aes(color = Base)) +
labs(title = "Spot Rates",
x = "Date",
y = "Spot") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple")) +
theme(legend.position = "bottom")
simple <- df1 %>%
group_by(Base) %>%
do(tidy(lm(excess ~ prem, data = .))) %>%
ungroup()
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
library(car)
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
cat("--------------", base , "--------------")
q <- rq(excess ~ prem, data = df1 %>% filter(Base == base), tau = c(0.25, 0.5, 0.75))
print(linearHypothesis(m, "prem = 1"))
}
qr <- rq(excess ~ prem, data = df1%>% filter(Base == "GBP"), tau = c(0.25, 0.5, 0.75))
summary(qr)
qrf_gbp <- quantregForest(excess ~ prem, data = df1 %>% filter(Base == "GBP"), ntree = 1000, mtry = 2, nodesize = 5)
qrf_gbp <- quantregForest(x = df1 %>% filter(Base == "GBP") %>% filter(prem),
y = df1 %>% filter(Base == "GBP") %>% filter(excess),
ntree = 1000, mtry = 2, nodesize = 5)
df1 %>% filter(Base == "GBP") %>% filter(prem)
df1
df1 %>% filter(Base == "GBP") %>% dplyr::select(prem)
qrf_gbp <- quantregForest(x = df1 %>% filter(Base == "GBP") %>% dplyr::select(prem),
y = df1 %>% filter(Base == "GBP") %>% dplyr::select(excess),
ntree = 1000, mtry = 2, nodesize = 5)
dim(df1 %>% filter(Base == "GBP") %>% dplyr::select(excess))
dim(df1 %>% filter(Base == "GBP") %>% dplyr::select(prem))
# install.packages("quantregForest")
# library(quantregForest)
df_gbp <- df1 %>% filter(Base == "GBP")
df_gbp$prem
qrf_gbp <- quantregForest(x = df_gbp$prem,
y = df_gbp$excess,
ntree = 1000, mtry = 2, nodesize = 5)
qrf_gbp <- quantregForest(x = data.frame(df_gbp$prem),
y = df_gbp$excess,
ntree = 1000, mtry = 2, nodesize = 5)
qrf_gbp
print(qrf_gbp)
preds <- predict(qrf_gbp, newdata = data.frame(prem = df_gbp$prem), what = c(0.1, 0.5, 0.9))))
preds <- predict(qrf_gbp, newdata = data.frame(prem = df_gbp$prem), what = c(0.1, 0.5, 0.9)))
preds <- predict(qrf_gbp, newdata = data.frame(prem = df_gbp$prem), what = c(0.1, 0.5, 0.9))
?rq
for (base in currencies){
cat("--------------", base , "--------------")
q <- rq(excess ~ prem, data = df1 %>% filter(Base == base), tau = c(0.25, 0.5, 0.75))
print(linearHypothesis(m, "prem = 1"))
}
currencies
qr <- rq(excess ~ prem, data = df1%>% filter(Base == "GBP"), tau = c(0.25, 0.5, 0.75))
summary(qr)
for (base in currencies){
cat("--------------", base , "--------------")
q <- rq(excess ~ prem, data = df1 %>% filter(Base == base), tau = c(0.25, 0.5, 0.75))
print(linearHypothesis(m, "prem = 1"))
}
for (base in currencies){
cat("--------------", base , "--------------")
q <- rq(excess ~ prem, data = df1 %>% filter(Base == base), tau = c(0.25, 0.5, 0.75))
print(linearHypothesis(q, "prem = 1"))
}
?pt
for (base in currencies){
cat("--------------", base , "--------------")
d <- df1 %>% filter(Base == base)
for (tau in quantiles){
cat("\nQuantile: ", tau, "\n")
q <- rq(excess ~ prem, data = d, tau = tau)
coef_est <- summary(q, se = "nid")$coefficients["prem", "Value"]
coef_se <- summary(q, se = "nid")$coefficients["prem", "Std. Error"]
# One sided test: H0: beta >= 1, H1: beta < 1
t <- (coef_est - 1) / coef_se
p <- pnorm(t)
cat("  Estimate:", round(coef_est, 4),
" | SE:", round(coef_se, 4),
" | z:", round(t, 2),
" | p-value (H0: beta >= 1):", round(p, 4), "\n\n")
}
}
quantiles <- c(0.25, 0.5, 0.75, 0.9)
for (base in currencies){
cat("--------------", base , "--------------")
d <- df1 %>% filter(Base == base)
for (tau in quantiles){
cat("\nQuantile: ", tau, "\n")
q <- rq(excess ~ prem, data = d, tau = tau)
coef_est <- summary(q, se = "nid")$coefficients["prem", "Value"]
coef_se <- summary(q, se = "nid")$coefficients["prem", "Std. Error"]
# One sided test: H0: beta >= 1, H1: beta < 1
t <- (coef_est - 1) / coef_se
p <- pnorm(t)
cat("  Estimate:", round(coef_est, 4),
" | SE:", round(coef_se, 4),
" | z:", round(t, 2),
" | p-value (H0: beta >= 1):", round(p, 4), "\n\n")
}
}
for (base in currencies){
cat("--------------", base , "--------------")
m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
print(linearHypothesis(m, "prem = 1"))
}
?quantregForest
for (base in currencies){
cat("--------------", base , "--------------")
d <- df1 %>% filter(Base == base)
for (tau in quantiles){
cat("\nQuantile: ", tau, "\n")
q <- rq(excess ~ prem, data = d, tau = tau)
s <- summary(q, se = "boot", R = 500)
coef_est <- s$coefficients["prem", "Value"]
coef_se <- s$coefficients["prem", "Std. Error"]
# One sided test: H0: beta >= 1, H1: beta < 1
z <- (coef_est - 1) / coef_se
p <- pnorm(t)
cat("  Estimate:", round(coef_est, 4),
" | SE:", round(coef_se, 4),
" | z:", round(z, 2),
" | p-value (H0: beta >= 1):", round(p, 4), "\n\n")
}
}
for (base in currencies){
cat("--------------", base , "--------------")
d <- df1 %>% filter(Base == base)
for (tau in quantiles){
cat("\nQuantile: ", tau, "\n")
q <- rq(excess ~ prem, data = d, tau = tau)
s <- summary(q, se = "boot", R = 500)
coef_est <- s$coefficients["prem", "Value"]
coef_se <- s$coefficients["prem", "Std. Error"]
# One sided test: H0: beta >= 1, H1: beta < 1
z <- (coef_est - 1) / coef_se
p <- pnorm(z)
cat("  Estimate:", round(coef_est, 4),
" | SE:", round(coef_se, 4),
" | z:", round(z, 2),
" | p-value (H0: beta >= 1):", round(p, 4), "\n\n")
}
}
kt_value <- function(r, alpha = 0.88, lambda = 2.25) {
ifelse(r >= 0, r^alpha, -lambda * (-r)^alpha)
}
df2 <- df1 %>%
mutate(pt = kt_value(excess))
df2
# plot excess returns vs pt
ggplot(df2, aes(x = prem, y = pt)) +
geom_point(aes(color = Base), alpha = 0.5) +
labs(title = "Excess Returns vs. pt",
x = "Forward Premium",
y = "pt") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple")) +
theme(legend.position = "bottom")
# plot excess returns vs pt
ggplot(df2, aes(x = excess, y = pt)) +
geom_point(aes(color = Base), alpha = 0.5) +
labs(title = "Excess Returns vs. pt",
x = "Forward Premium",
y = "pt") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple")) +
theme(legend.position = "bottom")
for (base in currencies){
cat("--------------", base , "--------------")
d <- df1 %>% filter(Base == base)
for (tau in quantiles){
cat("\nQuantile: ", tau, "\n")
q <- rq(excess ~ prem, data = d, tau = tau)
s <- summary(q, se = "boot", R = 500)
coef_est <- s$coefficients["prem", "Value"]
coef_se <- s$coefficients["prem", "Std. Error"]
# One sided test: H0: beta >= 1, H1: beta < 1
z <- (coef_est - 1) / coef_se
p <- pnorm(z)
qr_res <- rbind(qr_res, data.frame(
Base = base,
Tau = tau,
Estimate = coef_est,
StdError = coef_se,
Z = z,
Pvalue = p
))
cat("  Estimate:", round(coef_est, 4),
" | SE:", round(coef_se, 4),
" | z:", round(z, 2),
" | p-value (H0: beta >= 1):", round(p, 4), "\n\n")
}
}
qr_res <- data.frame()
for (base in currencies){
cat("--------------", base , "--------------")
d <- df1 %>% filter(Base == base)
for (tau in quantiles){
cat("\nQuantile: ", tau, "\n")
q <- rq(excess ~ prem, data = d, tau = tau)
s <- summary(q, se = "boot", R = 500)
coef_est <- s$coefficients["prem", "Value"]
coef_se <- s$coefficients["prem", "Std. Error"]
# One sided test: H0: beta >= 1, H1: beta < 1
z <- (coef_est - 1) / coef_se
p <- pnorm(z)
qr_res <- rbind(qr_res, data.frame(
Base = base,
Tau = tau,
Estimate = coef_est,
StdError = coef_se,
Z = z,
Pvalue = p
))
cat("  Estimate:", round(coef_est, 4),
" | SE:", round(coef_se, 4),
" | z:", round(z, 2),
" | p-value (H0: beta >= 1):", round(p, 4), "\n\n")
}
}
qr_res
ggplot(qr_res, aes(x = Tau, y = Estimate, color = Base)) +
geom_line() +
geom_point() +
geom_errorbar(aes(ymin = Estimate - 1.96 * StdError,
ymax = Estimate + 1.96 * StdError),
width = 0.02) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +
labs(title = "Quantile Regression Estimates of Forward Premium Coefficient",
x = "Quantile (τ)", y = "Estimate of β (prem)") +
theme_minimal()
tune_pt_params_rolling <- function(data, alphas, lambdas, window_size = 60, horizon = 1) {
param_grid <- expand.grid(alpha = alphas, lambda = lambdas)
results <- data.frame()
n <- nrow(data)
max_start <- n - window_size - horizon + 1
for (i in 1:nrow(param_grid)) {
alpha <- param_grid$alpha[i]
lambda <- param_grid$lambda[i]
rmse_vec <- c()
for (start in 1:max_start) {
train_idx <- start:(start + window_size - 1)
test_idx <- (start + window_size):(start + window_size + horizon - 1)
train <- data[train_idx, ]
test <- data[test_idx, ]
model <- lm(kt_value(excess, alpha, lambda) ~ prem, data = train)
preds <- predict(model, newdata = test)
y_true <- kt_value(test$excess, alpha, lambda)
rmse <- sqrt(mean((y_true - preds)^2))
rmse_vec <- c(rmse_vec, rmse)
}
results <- rbind(results, data.frame(alpha, lambda, RMSE = mean(rmse_vec)))
}
best <- results[which.min(results$RMSE), ]
return(list(best_params = best, full_results = results))
}
df_gbp <- df1 %>% filter(Base == "GBP")
alphas <- seq(0.5, 1.0, by = 0.05)
lambdas <- seq(1.0, 3.0, by = 0.25)
tuned <- tune_pt_params(df_gbp, alphas, lambdas, k = 5)
tuned <- tune_pt_params_rolling(df_gbp, alphas, lambdas)
best_params <- tuned$best_params
print(best_params)
tuned
plot_value_function <- function(alphas = c(0.5, 0.88), lambdas = c(1, 2.25, 5), x_range = c(-2, 2)) {
x_vals <- seq(x_range[1], x_range[2], length.out = 500)
plot_data <- expand.grid(x = x_vals, alpha = alphas, lambda = lambdas)
plot_data$value <- mapply(kt_value, plot_data$x, plot_data$alpha, plot_data$lambda)
plot_data$label <- paste0("α=", plot_data$alpha, ", λ=", plot_data$lambda)
ggplot(plot_data, aes(x = x, y = value, color = label)) +
geom_line(size = 1) +
labs(
title = "Prospect Theory Value Function",
x = "Excess Return (x)",
y = "Transformed Value v(x)",
color = "Parameters"
) +
theme_minimal()
}
# Example usage:
plot_value_function()
plot_value_function <- function(alphas = c(0.5, 0.88), lambdas = c(1, 2.25, 5), x_range = c(-2, 2)) {
x_vals <- seq(x_range[1], x_range[2], length.out = 500)
plot_data <- expand.grid(x = x_vals, alpha = alphas, lambda = lambdas)
plot_data$value <- mapply(kt_value, plot_data$x, plot_data$alpha, plot_data$lambda)
plot_data$label <- paste0("α=", plot_data$alpha, ", λ=", plot_data$lambda)
ggplot(plot_data, aes(x = x, y = value, color = label)) +
geom_line() +
labs(
title = "Prospect Theory Value Function",
x = "Excess Return (x)",
y = "Transformed Value v(x)",
color = "Parameters"
) +
theme_minimal()
}
# Example usage:
plot_value_function()
tune_pt_params_rolling <- function(data, alphas, lambdas, window_size = 60, horizon = 1) {
param_grid <- expand.grid(alpha = alphas, lambda = lambdas)
results <- data.frame()
n <- nrow(data)
max_start <- n - window_size - horizon + 1
pb <- progress_bar$new(
format = "  tuning [:bar] :percent eta: :eta",
total = nrow(pt_grid), clear = FALSE, width = 60
)
for (i in 1:nrow(param_grid)) {
alpha <- param_grid$alpha[i]
lambda <- param_grid$lambda[i]
rmse_vec <- c()
for (start in 1:max_start) {
train_idx <- start:(start + window_size - 1)
test_idx <- (start + window_size):(start + window_size + horizon - 1)
train <- data[train_idx, ]
test <- data[test_idx, ]
model <- lm(kt_value(excess, alpha, lambda) ~ prem, data = train)
preds <- predict(model, newdata = test)
y_true <- kt_value(test$excess, alpha, lambda)
rmse <- sqrt(mean((y_true - preds)^2))
rmse_vec <- c(rmse_vec, rmse)
}
results <- rbind(results, data.frame(alpha, lambda, RMSE = mean(rmse_vec)))
pb$tick()
}
best <- results[which.min(results$RMSE), ]
return(list(best_params = best, full_results = results))
}
install.packages("progress")
library(packages)
library(progress)
alphas <- seq(0.5, 1.0, by = 0.05)
tuned <- tune_pt_params_rolling(df_gbp, alphas, lambdas)
tune_pt_params_rolling <- function(data, alphas, lambdas, window_size = 60, horizon = 1) {
param_grid <- expand.grid(alpha = alphas, lambda = lambdas)
results <- data.frame()
n <- nrow(data)
max_start <- n - window_size - horizon + 1
pb <- progress_bar$new(
format = "  tuning [:bar] :percent eta: :eta",
total = nrow(param_grid), clear = FALSE, width = 60
)
for (i in 1:nrow(param_grid)) {
alpha <- param_grid$alpha[i]
lambda <- param_grid$lambda[i]
rmse_vec <- c()
for (start in 1:max_start) {
train_idx <- start:(start + window_size - 1)
test_idx <- (start + window_size):(start + window_size + horizon - 1)
train <- data[train_idx, ]
test <- data[test_idx, ]
model <- lm(kt_value(excess, alpha, lambda) ~ prem, data = train)
preds <- predict(model, newdata = test)
y_true <- kt_value(test$excess, alpha, lambda)
rmse <- sqrt(mean((y_true - preds)^2))
rmse_vec <- c(rmse_vec, rmse)
}
results <- rbind(results, data.frame(alpha, lambda, RMSE = mean(rmse_vec)))
pb$tick()
}
best <- results[which.min(results$RMSE), ]
return(list(best_params = best, full_results = results))
}
df_gbp <- df1 %>% filter(Base == "GBP")
alphas <- seq(0.5, 1.0, by = 0.05)
lambdas <- seq(1.0, 5.0, by = 0.25)
tuned <- tune_pt_params_rolling(df_gbp, alphas, lambdas)
best_params <- tuned$best_params
print(best_params)
tuned
lambdas <- seq(0, 5.0, by = 0.25)
tuned <- tune_pt_params_rolling(df_gbp, alphas, lambdas)
