---
title: "Dissertation Code v1"
author: "Archie C"
date: "2025-05-22"
output: html_document
---
```{r}

```

```{r preamble, include=FALSE, message=FALSE, warning=FALSE}
source("preamble.R")
```


```{r Data Import}
df <- read_xlsx("data/data1.xlsx")
dt <- as.data.table(df)
# list <- split(dt, by = names(dt)[1], keep.by = T)
```

```{r data processing}
df <- read_xlsx("data/data1.xlsx") %>%
    rename_with(~ c("Inst", "Bid", "Ask", "Mid", "Date")) %>%
    mutate(Date = as.Date(Date, format = "%Y-%m-%d"),
           Type = if_else(grepl("1MV|FWD", Inst), "forward", "spot"),
           Base = gsub("1MV=|=|FWD.*", "", Inst))

head(df)
tail(df)

spot_t <- df %>%
    filter(Type == "spot") %>%
    dplyr::select(Base, SpotDate = Date, s_t = Mid)
spot_t1 <- df %>%
    filter(Type == "spot") %>%
    dplyr::select(Base, Spot1Date = Date, s_t1 = Mid) %>%
    mutate(date1 = Spot1Date %m+% months(-1))

spot_df <- spot_t %>%
    inner_join(spot_t1, by = c("Base", "SpotDate" = "date1")) %>%
    mutate(
        spot = as.numeric(log(s_t)),
        spot1 = as.numeric(log(s_t1)),
        excess = as.numeric(spot1 - spot)
    )


fwd_df <- df %>%
    filter(Type == "forward") %>%
    dplyr::select(Base, Date, FwdMid = Mid)

df1 <- fwd_df %>%
    inner_join(spot_df, by = c("Base", "Date" = "SpotDate")) %>%
    mutate(
        f_t = as.numeric(FwdMid),
        fwd = log(f_t),
        prem = as.numeric(fwd - spot)
    )

currencies <- unique(df1$Base)
```

So to clarify what is happening in this data frame:
- `Date`: The date of the forward contract and spot rate, this can be considered $t$.
- `FwdMid`: The forward rate at time $t$, therefore aligning with the `Date` variable.
- `s_t`: The spot rate at time $t$, therefore aligning with the `Date` variable.
- `Spot1Date`: equivalent to $t+1$. This variable is here so that we can simply use mutate to calculate excess returns
- `s_t1`: The spot rate at time $t+1$, therefore aligning with the `Spot1Date` variable.
- `excess`: This is the excess returns variable. $\log(s_{t+1})-\log(s_t)$. This means that this is aligned with the `Spot1Date` variable.
- `f_t`: The forward rate at time $t$, therefore aligning with the `Date` variable.
- `fwd`: The log of the forward rate at time $t$, therefore aligning with the `Date` variable.
- `prem`: The forward premium, which is the difference between the log of the forward rate and the log of the spot rate at time $t$.

So in the simple analysis of the forward premium on excess returns, these are the correct variables to use, and aligned correctly.



```{r data vis}
ggplot(df1, aes(x = Date, y = prem)) +
    geom_line(aes(color = Base)) +
    labs(title = "Forward Premiums",
         x = "Date",
         y = "Premium") +
    theme_minimal() +
    scale_color_manual(values = c("blue", "red", "green", "purple")) +
    theme(legend.position = "bottom")

ggplot(df1, aes(x = Date, y = s_t)) +
    geom_line(aes(color = Base)) +
    labs(title = "Spot Rates",
         x = "Date",
         y = "Spot") +
    theme_minimal() +
    scale_color_manual(values = c("blue", "red", "green", "purple")) +
    theme(legend.position = "bottom")
```


```{r simple regression to check on the forward premium bias}
simple <- df1 %>%
    group_by(Base) %>%
    do(tidy(lm(excess ~ prem, data = .))) %>%
    ungroup()

for (base in currencies){
    cat("--------------", base , "--------------")
    m <- lm(excess ~ prem, data = df1 %>% filter(Base == base))
    cat("\n alpha:", round(coef(m)[1], 4), 
        " | beta:", round(coef(m)[2], 4), "\n")
    #print(coef(m))
    print(linearHypothesis(m, "prem = 1"))
}
```


So we have found recreated some of the results. We see that in the case of Canada, the result is not statistically different from 1, but in the case of the other currencies, we see that the forward premium is statistically significantly different from 1. This is consistent with the findings in the literature.

```{r plot of coefficients from simple regression}
ggplot(simple %>% filter(term == "prem"), aes(x = Base, y = estimate)) +
  geom_pointrange(aes(ymin = estimate - std.error, ymax = estimate + std.error),
                  position = position_dodge(width = 0.5), 
                  color = "steelblue") +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Forward Premium Coefficients",
       x = "Currency",
       y = "Coefficient (β)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

### Estimating the asymmetric loss function

```{r}
# creating forecast error variable
# - used to calculate the loss function

df1 <- df1 %>%
  mutate(
    forecast_error = spot1 - fwd  # s_{t+1} - f_t
  ) %>%
  arrange(Base, Date) %>%
  group_by(Base) %>%
  mutate(
    lag_error = lag(forecast_error)
  ) %>%
  ungroup() %>%
  na.omit()

# Choose loss power (1 for Lin-Lin, 2 for Quad-Quad)
p <- 2

# defining moment conditions
gmm_moments <- function(theta, data) {
  alpha <- theta[1]
  e <- data$forecast_error
  z <- as.matrix(data[, c("const", "lag_error")])
  lambda <- alpha + (1 - 2 * alpha) * (e < 0)
  g <- lambda * e^(p - 1) * z
  return(g)
}

# Prepare results list
currency_results <- list()
currency_list <- unique(df1$Base)

# Loop over currencies
for (cur in currency_list) {
  message("Running GMM for ", cur)
  data_cur <- df1 %>%
    filter(Base == cur) %>%
    mutate(
      forecast_error = spot1 - fwd,
      lag_error = lag(forecast_error),
      const = 1
    ) %>%
    dplyr::select(forecast_error, lag_error, const) %>%
    na.omit()

  if (nrow(data_cur) > 10) {
    # GMM with Brent optimization using CUE
    res <- tryCatch({
      gmm(g = gmm_moments,
          x = data_cur,
          t0 = c(0.5),
          type = "cue",
          method = "Brent",
          lower = 0.01,
          upper = 0.99)
    }, error = function(e) NULL)

    if (!is.null(res)) {
      alpha_hat <- coef(res)
      vcv_hat <- vcov(res)
      se_alpha <- sqrt(vcv_hat[1, 1])
      t_stat <- (alpha_hat - 0.5) / se_alpha
      p_val <- 2 * pt(-abs(t_stat), df = nrow(data_cur) - 1)

      currency_results[[cur]] <- list(
        summary = summary(res),
        alpha = alpha_hat,
        vcov = vcv_hat,
        t_stat = t_stat,
        p_val = p_val
      )
    }
  } else {
    message("Not enough data for ", cur)
  }
}

# View results for one example currency (e.g., EUR)
print(currency_results[["EUR"]]$summary)
print(currency_results[["EUR"]]$t_stat)
print(currency_results[["EUR"]]$p_val)

# Extract alpha estimates
alphas <- sapply(currency_results, function(x) if (!is.null(x)) x$alpha else NA)
print(alphas)

# Extract p-values for H0: alpha = 0.5
p_vals <- sapply(currency_results, function(x) if (!is.null(x)) x$p_val else NA)
print(p_vals)

```



```{r quantile regression}
quantiles <- c(0.25, 0.5, 0.75, 0.9)
qr_res <- data.frame()

for (base in currencies){
    cat("--------------", base , "--------------")
    d <- df1 %>% filter(Base == base)
    
    for (tau in quantiles){
    cat("\nQuantile: ", tau, "\n")
    q <- rq(excess ~ prem, data = d, tau = tau)
    s <- summary(q, se = "boot", R = 500)
    
    coef_est <- s$coefficients["prem", "Value"]
    coef_se <- s$coefficients["prem", "Std. Error"]
    
    
    # One sided test: H0: beta >= 1, H1: beta < 1
    z <- (coef_est - 1) / coef_se
    p <- pnorm(z)
    
    qr_res <- rbind(qr_res, data.frame(
      Base = base,
      Tau = tau,
      Estimate = coef_est,
      StdError = coef_se,
      Z = z,
      Pvalue = p
    ))
    
    cat("  Estimate:", round(coef_est, 4), 
        " | SE:", round(coef_se, 4),
        " | z:", round(z, 2),
        " | p-value (H0: beta >= 1):", round(p, 4), "\n\n")
    }
}


```

```{r}
ggplot(qr_res, aes(x = Tau, y = Estimate, color = Base)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = Estimate - 1.96 * StdError,
                    ymax = Estimate + 1.96 * StdError),
                width = 0.02) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +
  labs(title = "Quantile Regression Estimates of Forward Premium Coefficient",
       x = "Quantile (τ)", y = "Estimate of β (prem)") +
  theme_minimal()

```



```{r quantile forests}
# install.packages("quantregForest")
# library(quantregForest)
df_gbp <- df1 %>% filter(Base == "GBP")

qrf_gbp <- quantregForest(x = data.frame(df_gbp$prem), 
                          y = df_gbp$excess,
                          nthreads = 4,
                          ntree = 1000, nodesize = 5)

print(qrf_gbp)

preds <- predict(qrf_gbp, newdata = data.frame(prem = df_gbp$prem), what = c(0.1, 0.5, 0.9))



```


```{r}
kt_value <- function(r, alpha = 0.88, lambda = 2.25) {
  ifelse(r >= 0, r^alpha, -lambda * (-r)^alpha)
}



df2 <- df1 %>%
    mutate(pt = kt_value(excess))

# plot excess returns vs pt
ggplot(df2, aes(x = excess, y = pt)) +
    geom_point(aes(color = Base), alpha = 0.5) +
    labs(title = "Excess Returns vs. Prospect Theory",
         x = "Excess Returns",
         y = "pt") +
    theme_minimal() +
    scale_color_manual(values = c("blue", "red", "green", "purple")) +
    theme(legend.position = "bottom")

```

```{r}

tune_pt_params_rolling <- function(data, alphas, lambdas, window_size = 60, horizon = 1) {
  param_grid <- expand.grid(alpha = alphas, lambda = lambdas)
  results <- data.frame()
  
  n <- nrow(data)
  max_start <- n - window_size - horizon + 1
  
  pb <- progress_bar$new(
    format = "  tuning [:bar] :percent eta: :eta",
    total = nrow(param_grid), clear = FALSE, width = 60
  )
  
  for (i in 1:nrow(param_grid)) {
    alpha <- param_grid$alpha[i]
    lambda <- param_grid$lambda[i]
    rmse_vec <- c()
    
    for (start in 1:max_start) {
      train_idx <- start:(start + window_size - 1)
      test_idx <- (start + window_size):(start + window_size + horizon - 1)
      
      train <- data[train_idx, ]
      test <- data[test_idx, ]
      
      model <- lm(kt_value(excess, alpha, lambda) ~ prem, data = train)
      preds <- predict(model, newdata = test)
      y_true <- kt_value(test$excess, alpha, lambda)
      rmse <- sqrt(mean((y_true - preds)^2))
      
      rmse_vec <- c(rmse_vec, rmse)
    }
    
    results <- rbind(results, data.frame(alpha, lambda, RMSE = mean(rmse_vec)))
    pb$tick()
  }
  
  best <- results[which.min(results$RMSE), ]
  return(list(best_params = best, full_results = results))
}


```

```{r Tuning value functions}
df_gbp <- df1 %>% filter(Base == "GBP")

alphas <- seq(0.5, 1.0, by = 0.05)
lambdas <- seq(0, 5.0, by = 0.25)

tuned <- tune_pt_params_rolling(df_gbp, alphas, lambdas)
best_params <- tuned$best_params

print(best_params)

```

```{r}


plot_value_function <- function(alphas = c(0.5, 0.88), lambdas = c(1, 2.25, 5), x_range = c(-2, 2)) {
  x_vals <- seq(x_range[1], x_range[2], length.out = 500)
  plot_data <- expand.grid(x = x_vals, alpha = alphas, lambda = lambdas)
  plot_data$value <- mapply(kt_value, plot_data$x, plot_data$alpha, plot_data$lambda)
  plot_data$label <- paste0("α=", plot_data$alpha, ", λ=", plot_data$lambda)
  
  ggplot(plot_data, aes(x = x, y = value, color = label)) +
    geom_line() +
    labs(
      title = "Prospect Theory Value Function",
      x = "Excess Return (x)",
      y = "Transformed Value v(x)",
      color = "Parameters"
    ) +
    theme_minimal()
}

# Example usage:
plot_value_function()

```




